---
layout: post
title:  "Command line exercise & telling someone else about your code"
date:   2015-06-02 22:58:42
categories: recurse center
---

Notes from May 28-June 2

I worked on a small programming assignment to create a phonebook application. The program needed to parse command-line arguments to do things like create a place to write data, add or edit contacts with numbers, and look up contacts using the name or number. I made a command line tool using the **Xcode** project template, the **NSMutableDictionary** class for accessing and searching through data, and a **plist** file to store the data. I used mainly Objective-C and a little bit of C to handle input from either the Xcode console (if you run the project in Xcode) or from terminal. One new thing I learned was how to do the latter, to run my project like a shell program in the terminal.

You can run your compiled command line tool by navigating to the directory of the Xcode project in terminal and entering 

	./projectName

Or you can edit the shell PATH by adding the location of your compiled Xcode app, which allows you to link a shorthand name to running the project from any directory by calling this name. 

To pass the program some arguments (let's say you have three), you can add them after you call ./projectName or your shortHandProjectName, like so

	 shortHandProjectName argument[1] argument[2] argument[3]

Inside your application's main(), you can access however many arguments that are passed via the *argv* array 

	int main(int argc, const char * argv[]) { /*your program*/}

Where arg[1] = argument[1], as argv[0] stores the name by which the program was called.

Once I got the phonebook functionality working, I talked through my code with one of the facilitators - what a difference it makes to talk to someone about what you wrote. What I had previously thought were minor issues were overshadowed by much bigger ones - tasks were unnecessarily intertwined and hard to understand.  

When learning how to paint, you're often encouraged to step away from your work (for hours, days) to gain a fresh perspective and see the big issues, and the longer you wait the better. While I could have waited a couple days before looking at my code again, I likely wouldn't have realized the problems I did while telling someone about it. There's something about explaining how a program works that makes the major issues stick out right away. 

I plan to re-write this project so that it's more modular in functionality, easier to understand and reuse, and will share the link here. 